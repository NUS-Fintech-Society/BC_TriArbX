import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { TriangleRate, getTriangleRate } from "../utils/uniswap";
import { triangleDS } from "../utils/uniswap/store/triangleDS";
import { ethers } from "ethers";

export default function Home() {
  const [arbitrageRate, setArbitrageRate] = useState<
    Record<string, TriangleRate>
  >({});

  const makeConnection = async (
    ethereum:
      | ethers.providers.ExternalProvider
      | ethers.providers.JsonRpcFetchFunc
  ) => {
    /**
     * Get arbitrage
     * ethereum tokenA => tokenB => tokenC
     */

    for (const path of triangleDS) {
      try {
        arbitrageRate[path.toString()] = await getTriangleRate(ethereum, path);

        setArbitrageRate({ ...arbitrageRate });
      } catch {}
    }
  };

  useEffect(() => {
    const { ethereum } = window;
    makeConnection(ethereum);
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className="flex flex-row flex-wrap gap-2 w-full">
          {Object.keys(arbitrageRate)
            .sort(
              (pathX, pathY) =>
                arbitrageRate[pathY].arbitrageRate -
                arbitrageRate[pathX].arbitrageRate
            )
            .map((path, index) => (
              <div
                key={index}
                className="flex flex-col items-center justify-center border h-56 w-52 rounded-lg p-4"
              >
                <span>{path}</span>
                <span>{`1 ${path.split(",")[0]} = ${arbitrageRate[
                  path
                ].aTob.toFixed(4)} ${path.split(",")[1]}`}</span>
                <span>{`1 ${path.split(",")[1]} = ${arbitrageRate[
                  path
                ].bToc.toFixed(4)} ${path.split(",")[2]}`}</span>
                <span>{`1 ${path.split(",")[2]} = ${arbitrageRate[
                  path
                ].cToA.toFixed(4)} ${path.split(",")[0]}`}</span>
                <span
                  className={
                    arbitrageRate[path].arbitrageRate >= 1
                      ? "text-green-500"
                      : ""
                  }
                >
                  Rate: {arbitrageRate[path].arbitrageRate.toFixed(4)}
                </span>
              </div>
            ))}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
